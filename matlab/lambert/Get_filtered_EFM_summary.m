
function EFMfilteredsummary=Get_filtered_EFM_summary(efmoutput,filters,constants,mode)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% @Input:
% efmoutput: the efmoutput generated by EFMcompute_kepler
% filters: The required filters. The filters should contain:
            % filters.a_min
            % filters.a_max
            % filters.delVD_min
            % filters.delVD_max
            % filters.Nmin_bnd
            % filters.Nmax_bnd
            % filters.min_alt
            % filters.max_alt

            % binary (0/1) : 0-> Disable, 1-> Enable filters
            % filters.check_escapevel  
            % filters.check_a_bnds
            % filters.check_delVD_bnds
            % filters.check_N_bnds
            % filters.check_alt_bnds

% @Output: 
%     EFMfilteredsummary: The filtered EFM, summarized into
%                           - Number of solutions
%                           - min delV total
%                           - min delV departure
%                           - min delV arrival

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


N_deptime=length(efmoutput.inputconfig.DepTime);
N_timeflights=length(efmoutput.inputconfig.TimeFlights);


[DT,TF]=meshgrid(efmoutput.inputconfig.DepTime,efmoutput.inputconfig.TimeFlights);

DDV_min=zeros(size(DT));
DDV_max=zeros(size(DT));

DDVDep_min=zeros(size(DT));
DDVDep_max=zeros(size(DT));

DDVArr_min=zeros(size(DT));
DDVArr_max=zeros(size(DT));

DNsol_all=zeros(size(DT));
DNsol_feas=zeros(size(DT));

for depstarttime_ind = 1:N_deptime        % EFM x-axis (departure time)
    
    for timeflight_ind = 1:N_timeflights
        Asol=efmoutput.SimSol_Asol{depstarttime_ind,timeflight_ind};
        Nsols_all=size(Asol,1);
        
        transferorbits=efmoutput.SimSol_transferorbits{depstarttime_ind,timeflight_ind};
        
        delV=zeros(Nsols_all,1);
        delVD=zeros(Nsols_all,1);
        delVA=zeros(Nsols_all,1);
        
        for i=1:Nsols_all
            transorbit=convert_transferorbit_mat2struct(transferorbits(i,:));
            [feas,FeasCodes_index]=SolnFilter(transorbit,filters,constants,mode);
            if i==1
                Feas=ones(Nsols_all,length(feas));
            end
            Feas(i,:)=feas;
            
            delV(i)=transorbit.delV;
            delVD(i)=transorbit.delVD;
            delVA(i)=transorbit.delVA;
            
        end

        if isempty(Asol)==1
            DNsol_all(timeflight_ind,depstarttime_ind)=NaN;
            DNsol_feas(timeflight_ind,depstarttime_ind)=NaN;
            
            DDV_min(timeflight_ind,depstarttime_ind)=NaN;
            DDV_max(timeflight_ind,depstarttime_ind)=NaN;
            
            DDVDep_min(timeflight_ind,depstarttime_ind)=NaN;
            DDVDep_max(timeflight_ind,depstarttime_ind)=NaN;

            DDVArr_min(timeflight_ind,depstarttime_ind)=NaN;
            DDVArr_max(timeflight_ind,depstarttime_ind)=NaN;
            continue
        end
        

        feas=prod(Feas,2);
        
        DNsol_all(timeflight_ind,depstarttime_ind)=Nsols_all;


        
        % take only feasible orbits
        Nsols_filtered=sum(feas);
        delV=delV(feas==1);
        delVD=delVD(feas==1);
        delVA=delVA(feas==1);
        
        
        if Nsols_filtered==0 % if empty i.e. no feasible solutions
            DNsol_feas(timeflight_ind,depstarttime_ind)=NaN;
            DDV_min(timeflight_ind,depstarttime_ind)=NaN;
            DDV_max(timeflight_ind,depstarttime_ind)=NaN;
            
            DDVDep_min(timeflight_ind,depstarttime_ind)=NaN;
            DDVDep_max(timeflight_ind,depstarttime_ind)=NaN;

            DDVArr_min(timeflight_ind,depstarttime_ind)=NaN;
            DDVArr_max(timeflight_ind,depstarttime_ind)=NaN;
        else
            DNsol_feas(timeflight_ind,depstarttime_ind)=Nsols_filtered;
            DDV_min(timeflight_ind,depstarttime_ind)=min( delV )*constants.normV2trueV;
            DDV_max(timeflight_ind,depstarttime_ind)=max( delV )*constants.normV2trueV;
            
            DDVDep_min(timeflight_ind,depstarttime_ind)=min( delVD )*constants.normV2trueV;
            DDVDep_max(timeflight_ind,depstarttime_ind)=max( delVD )*constants.normV2trueV;

            DDVArr_min(timeflight_ind,depstarttime_ind)=min( delVA )*constants.normV2trueV;
            DDVArr_max(timeflight_ind,depstarttime_ind)=max( delVA )*constants.normV2trueV;
        end
    end
end

EFMfilteredsummary.DepTime=efmoutput.inputconfig.DepTime;
EFMfilteredsummary.TimeFlights=efmoutput.inputconfig.TimeFlights;

EFMfilteredsummary.DT=DT;
EFMfilteredsummary.TF=TF;

EFMfilteredsummary.DDV_min=DDV_min;
EFMfilteredsummary.DDV_max=DDV_max;

EFMfilteredsummary.DDVDep_min=DDVDep_min;
EFMfilteredsummary.DDVDep_max=DDVDep_max;

EFMfilteredsummary.DDVArr_min=DDVArr_min;
EFMfilteredsummary.DDVArr_max=DDVArr_max;

EFMfilteredsummary.DNsol_all=DNsol_all;
EFMfilteredsummary.DNsol_feas=DNsol_feas;



