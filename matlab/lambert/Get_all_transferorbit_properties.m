function transorbits=Get_all_transferorbit_properties(Asol,r0A,r0B,v0A,v0B,t_depart_normalized,t_des,lambertparams,constants,config)
% COmpute all the transfer trajectories/orbits for each row in Asol
% Asol contains all the solutions of a,N for given t_des

% @Input:   - Asol has all solutions of a and N for given t_des. Asol is
%               generated by Get_a
%           - r0A: the normalized position vector of departure on departure orbit
%           - r0B: the normalized arrival position vector
%           - v0A: the normalized velocity in the departure orbit at r0A
%           - v0B: the normalized velocity in the departure orbit at r0B
%           - t_depart_normalized: the actual departure time in Ephimeris time (in normalized units)
%           - t_des the time of flight in normalized units
%           - lambertparams: the structure containing all the lambert
%               parameters

for i=1:1:size(Asol,1)
    N=Asol(i,1);
    a=Asol(i,2);
    
    if Asol(i,3)==1
        branch='upper';
    else
        branch='lower';
    end

    tforbit=Get_transferorbit(a,N,r0A,r0B,branch,t_depart_normalized,t_des,lambertparams,constants,config);
    tforbit.v1
    tforbit.v2
    
    
    tforbit.v0A=v0A;
    tforbit.v0B=v0B;
    
    v1=tforbit.v1;
    v2=tforbit.v2;
    tforbit.delV = norm(abs(v1-v0A)) + norm(abs(v2-v0B)); % Delta V cost #changed norm to 1 norm
    tforbit.delVD = norm(abs(v1-v0A)); % Departure
    tforbit.delVA = norm(abs(v2-v0B)); % Arrival
    
    M=convert_transferorbit_struct2mat(tforbit);
    if i==1
        transorbits=zeros(size(Asol,1),length(M));
    end
    transorbits(i,:)=M;
    
end